setwd("F:/Workspaces/rstudio-workspace")
setwd("F:/Workspaces/rstudio-workspace")
shiny::runApp('ns-dashboard/dashboard')
install.packages("shinydashboard",dependencies = T)
runApp('ns-dashboard/dashboard')
install.packages("DT",dependencies = T)
runApp('ns-dashboard/dashboard')
install.packages("RMySQL",dependencies = T)
runApp('ns-dashboard/dashboard')
install.packages("lubridate",dependencies = T)
runApp('ns-dashboard/dashboard')
install.packages("plotly",dependencies = T)
runApp('ns-dashboard/dashboard')
shiny::runApp('ns-dashboard/dashboard')
channelPerformanceData <- loadData('channelPerformance3')
head(channelPerformanceData)
tyDate1 <- as.Date("2017-01-05")
tyDate2 <- as.Date("2017-01-05")
lyDate1 <- as.Date("2019-01-06")
lyDate2 <- as.Date("2019-01-06")
tyDate1 <- as.Date("2018-01-05")
tyDate2 <- as.Date("2018-01-05")
metric <- "transactions"
df <- createIndexTableTotals_(channelPerformanceData,tyDate1,tyDate2,lyDate1,lyDate2,metric)
head(df)
DT::datatable(
data = indexDataTotals,
rownames = FALSE,
editable = FALSE,
#caption = "Index tabel - yesterday compared to same day last year",
extensions = c('Buttons', 'KeyTable'),
options = list(
style = "bootstrap",
buttons = c('copy', 'csv', 'excel', I('colvis')),
keys = TRUE,
#pageLength=nrow(indexDataTotals),
lengthChange = FALSE,
class = 'cell-border stripe',
dom = 'Bft',
searching = FALSE,
ordering = 0,
scrollX = TRUE,
columnDefs = list(
list(targets = 0, visible = FALSE),
list(targets = 3, visible = FALSE),
list(targets = 6, visible = FALSE),
list(targets = 9, visible = FALSE),
list(targets = 12, visible = FALSE),
list(targets = 15, visible = FALSE),
list(targets = 18, visible = FALSE),
list(targets = 21, visible = FALSE),
list(targets = 24, visible = FALSE),
list(targets = 27, visible = FALSE),
list(targets = 30, visible = FALSE)
)
),
colnames = c(
'x',
'Domain',
'All',
'All sdly',
'All index',
'CPC',
'CPC sdly',
'CPC index',
'Organic',
'Organic sdly',
'Organic index',
'Direct',
'Direct sdly',
'Direct index',
'Referral',
'Referral sdly',
'Referral index',
'Display',
'Display sdly',
'Display index',
'Criteo',
'Criteo sdly',
'Criteo index',
'Social',
'Social sdly',
'Social index',
'Email',
'Email sdly',
'Email index',
'Other',
'Other sdly',
'Other index'
)
) %>% formatStyle('all_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('cpc_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('organic_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('direct_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('referral_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('display_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('criteo_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('social_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('email_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('other_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
))
indexDataTotals <- df
DT::datatable(
data = indexDataTotals,
rownames = FALSE,
editable = FALSE,
#caption = "Index tabel - yesterday compared to same day last year",
extensions = c('Buttons', 'KeyTable'),
options = list(
style = "bootstrap",
buttons = c('copy', 'csv', 'excel', I('colvis')),
keys = TRUE,
#pageLength=nrow(indexDataTotals),
lengthChange = FALSE,
class = 'cell-border stripe',
dom = 'Bft',
searching = FALSE,
ordering = 0,
scrollX = TRUE,
columnDefs = list(
list(targets = 0, visible = FALSE),
list(targets = 3, visible = FALSE),
list(targets = 6, visible = FALSE),
list(targets = 9, visible = FALSE),
list(targets = 12, visible = FALSE),
list(targets = 15, visible = FALSE),
list(targets = 18, visible = FALSE),
list(targets = 21, visible = FALSE),
list(targets = 24, visible = FALSE),
list(targets = 27, visible = FALSE),
list(targets = 30, visible = FALSE)
)
),
colnames = c(
'x',
'Domain',
'All',
'All sdly',
'All index',
'CPC',
'CPC sdly',
'CPC index',
'Organic',
'Organic sdly',
'Organic index',
'Direct',
'Direct sdly',
'Direct index',
'Referral',
'Referral sdly',
'Referral index',
'Display',
'Display sdly',
'Display index',
'Criteo',
'Criteo sdly',
'Criteo index',
'Social',
'Social sdly',
'Social index',
'Email',
'Email sdly',
'Email index',
'Other',
'Other sdly',
'Other index'
)
) %>% formatStyle('all_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('cpc_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('organic_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('direct_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('referral_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('display_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('criteo_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('social_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('email_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
)) %>%
formatStyle('other_index',  backgroundColor = styleInterval(
cuts = c(5, 80, 89.99, 99.99, 110),
values = c(
'white',
'#ff5050',
'#ff8080',
'white',
'#bdf5bd',
'#90ee90'
)
))
runApp('ns-dashboard/dashboard')
setwd("F:/Workspaces/visual-studio-workspace/shiny_modules")
scatterPlot <- function(data, cols) {
ggplot(data, aes_string(x = cols[1], y = cols[2])) +
geom_point(aes(color = selected_)) +
scale_color_manual(values = c("black", "#66D65C"), guide = FALSE)
}
library(shiny)
library(ggplot2)
# First we’ll make the module UI function. We want two plots, 'plot1' and 'plot2', side-by-side with a common brush ID of 'brush'.
# (Notice that the brush ID needs to be wrapped in 'ns()', just like the plotOutput IDs.)
linkedScatterUI <- function(id) {
ns <- NS(id)
fluidRow(
column(6, plotOutput(ns("plot1"), brush = ns("brush"))),
column(6, plotOutput(ns("plot2"), brush = ns("brush")))
)
}
# The module server function comes next. Besides the mandatory input, output, and session parameters,
# we need to know the data frame to plot (data), and the column names that should be used
# as x and y for each plot (left and right).
# To allow the data frame and columns to change in response to user actions, the data, left,
# right must all be reactive expressions.
linkedScatter <- function(input, output, session, data, left, right) {
# Yields the data frame with an additional column "selected_"
# that indicates whether that observation is brushed
dataWithSelection <- reactive({
brushedPoints(data(), input$brush, allRows = TRUE)
})
output$plot1 <- renderPlot({
scatterPlot(dataWithSelection(), left())
})
output$plot2 <- renderPlot({
scatterPlot(dataWithSelection(), right())
})
return(dataWithSelection)
}
# Notice that the 'linkedScatter' function returns the 'dataWithSelection' reactive. This means that
# the caller of this module can make use of the brushed data as well, such as showing it in a table
# below the plots, for example.
# For clarity and ease of testing, let’s put the plotting code in a standalone function.
# The 'scale_color_manual' call sets the colors of unselected vs. selected points,
# and 'guide = FALSE' hides the legend.
scatterPlot <- function(data, cols) {
ggplot(data, aes_string(x = cols[1], y = cols[2])) +
geom_point(aes(color = selected_)) +
scale_color_manual(values = c("black", "#66D65C"), guide = FALSE)
}
runApp('working_sample_app.R')
